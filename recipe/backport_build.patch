diff --git a/CMakeLists.txt b/CMakeLists.txt
index a03eedd..9ad4bc3 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,8 +1,6 @@
-cmake_minimum_required(VERSION 3.5)
-if(${CMAKE_VERSION} VERSION_LESS 3.12)
-    cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})
-else()
-    cmake_policy(SET CMP0074 NEW)
+cmake_minimum_required(VERSION 3.14)
+if(${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.27)
+    cmake_policy(SET CMP0148 NEW)
 endif()
 
 project("sycomore" VERSION 1.3.2)
@@ -10,14 +8,6 @@ project("sycomore" VERSION 1.3.2)
 option(BUILD_SHARED_LIBS "Build Sycomore with shared libraries." ON)
 option(BUILD_TESTING "Build unit tests." ON)
 option(BUILD_PYTHON_WRAPPERS "Build the Python Wrappers." ON)
-option(
-    BUILD_STANDALONE_PYTHON_WRAPPERS
-    "Build the Python Wrappers as a standalone library." OFF)
-
-if(NOT BUILD_PYTHON_WRAPPERS AND BUILD_STANDALONE_PYTHON_WRAPPERS)
-    message(WARNING "Standalone Python wrappers requested: setting BUILD_PYTHON_WRAPPERS to ON")
-    set(BUILD_PYTHON_WRAPPERS ON CACHE BOOL "Build the Python Wrappers." FORCE)
-endif()
 
 set(CMAKE_INSTALL_MESSAGE LAZY)
 
@@ -53,20 +43,19 @@ if(BUILD_TESTING)
 endif()
 
 # Export the build tree (don't install the generated file)
-if(NOT BUILD_STANDALONE_PYTHON_WRAPPERS)
-    export(
-        TARGETS libsycomore NAMESPACE sycomore:: 
-        FILE "${PROJECT_BINARY_DIR}/sycomoreTargets.cmake")
+export(
+    TARGETS libsycomore NAMESPACE sycomore:: 
+    FILE "${PROJECT_BINARY_DIR}/sycomoreTargets.cmake")
+
+# Export the install tree
+write_basic_package_version_file(
+    "sycomoreConfigVersion.cmake" COMPATIBILITY SameMajorVersion)
+set(INSTALL_CMAKE_DIR "${CMAKE_INSTALL_PREFIX}/lib/CMake/sycomore")
+install(EXPORT sycomoreTargets NAMESPACE sycomore:: DESTINATION "${INSTALL_CMAKE_DIR}")
+configure_file(sycomoreConfig.cmake.in sycomoreConfig.cmake @ONLY)
+install(
+    FILES 
+        ${CMAKE_CURRENT_BINARY_DIR}/sycomoreConfig.cmake
+        ${CMAKE_CURRENT_BINARY_DIR}/sycomoreConfigVersion.cmake
+    DESTINATION "${INSTALL_CMAKE_DIR}")
 
-    # Export the install tree
-    write_basic_package_version_file(
-        "sycomoreConfigVersion.cmake" COMPATIBILITY SameMajorVersion)
-    set(INSTALL_CMAKE_DIR "${CMAKE_INSTALL_PREFIX}/lib/CMake/sycomore")
-    install(EXPORT sycomoreTargets NAMESPACE sycomore:: DESTINATION "${INSTALL_CMAKE_DIR}")
-    configure_file(sycomoreConfig.cmake.in sycomoreConfig.cmake @ONLY)
-    install(
-        FILES 
-            ${CMAKE_CURRENT_BINARY_DIR}/sycomoreConfig.cmake
-            ${CMAKE_CURRENT_BINARY_DIR}/sycomoreConfigVersion.cmake
-        DESTINATION "${INSTALL_CMAKE_DIR}")
-endif()
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 9c5619b..8d5e383 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1,79 +1,77 @@
-find_package(PythonInterp REQUIRED)
+find_package(Python COMPONENTS Interpreter REQUIRED)
 find_package(xsimd REQUIRED)
 
-if(NOT BUILD_STANDALONE_PYTHON_WRAPPERS)
-    file(GLOB_RECURSE header_files "*.h")
-    file(GLOB_RECURSE source_files "*.cpp")
-    file(GLOB_RECURSE template_files "*.txx")
-    list(SORT header_files)
-    list(SORT source_files)
-    list(SORT template_files)
+file(GLOB_RECURSE header_files "*.h")
+file(GLOB_RECURSE source_files "*.cpp")
+file(GLOB_RECURSE template_files "*.txx")
+list(SORT header_files)
+list(SORT source_files)
+list(SORT template_files)
+
+if(MSVC)
+    set_source_files_properties(
+        sycomore/epg/simd_api_sse2.cpp PROPERTIES 
+        COMPILE_FLAGS "/arch:SSE2")
+    set_source_files_properties(
+        sycomore/epg/simd_api_avx.cpp PROPERTIES
+        COMPILE_FLAGS "/arch:AVX")
+    set_source_files_properties(
+        sycomore/epg/simd_api_avx512.cpp PROPERTIES
+        COMPILE_FLAGS "/arch:AVX512")
+else()
+    set_source_files_properties(
+        sycomore/epg/simd_api_sse2.cpp PROPERTIES COMPILE_FLAGS "-msse2")
+    set_source_files_properties(
+        sycomore/epg/simd_api_avx.cpp PROPERTIES COMPILE_FLAGS "-mavx")
     
-    if(MSVC)
-        set_source_files_properties(
-            sycomore/epg/simd_api_sse2.cpp PROPERTIES 
-            COMPILE_FLAGS "/arch:SSE2")
-        set_source_files_properties(
-            sycomore/epg/simd_api_avx.cpp PROPERTIES
-            COMPILE_FLAGS "/arch:AVX")
-        set_source_files_properties(
-            sycomore/epg/simd_api_avx512.cpp PROPERTIES
-            COMPILE_FLAGS "/arch:AVX512")
-    else()
-        set_source_files_properties(
-            sycomore/epg/simd_api_sse2.cpp PROPERTIES COMPILE_FLAGS "-msse2")
-        set_source_files_properties(
-            sycomore/epg/simd_api_avx.cpp PROPERTIES COMPILE_FLAGS "-mavx")
-        
-        # gcc -march=skylake-avx512 -Q --help=target | grep avx512 | grep enabled
-        # This is the earliest architecture to support AVX512
-        set(AVX512_FLAGS "-mavx512bw -mavx512cd -mavx512dq -mavx512f -mavx512vl")
-        if(APPLE AND "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
-            # Pretend we are GCC >= 6 so that xsimd enables AVX512
-            # cf. https://github.com/xtensor-stack/xsimd/blob/7.4.9/include/xsimd/config/xsimd_instruction_set.hpp#L109
-            set(AVX512_FLAGS "${AVX512_FLAGS} -U__GNUC__ -D__GNUC__=6")
-        endif()
-        set_source_files_properties(
-            sycomore/epg/simd_api_avx512.cpp PROPERTIES 
-            COMPILE_FLAGS "${AVX512_FLAGS}")
+    # gcc -march=skylake-avx512 -Q --help=target | grep avx512 | grep enabled
+    # This is the earliest architecture to support AVX512
+    set(AVX512_FLAGS "-mavx512bw -mavx512cd -mavx512dq -mavx512f -mavx512vl")
+    if(APPLE AND "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
+        # Pretend we are GCC >= 6 so that xsimd enables AVX512
+        # cf. https://github.com/xtensor-stack/xsimd/blob/7.4.9/include/xsimd/config/xsimd_instruction_set.hpp#L109
+        set(AVX512_FLAGS "${AVX512_FLAGS} -U__GNUC__ -D__GNUC__=6")
     endif()
-    
-    add_library(libsycomore ${source_files} ${header_files} ${template_files})
-    
-    target_compile_definitions(
-        libsycomore
-        PRIVATE
-            $<$<PLATFORM_ID:Windows>:BUILDING_SYCOMORE>)
-    
-    target_include_directories(
-        libsycomore
-        PUBLIC
-            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/> $<INSTALL_INTERFACE:>
-            ${xsimd_INCLUDE_DIRS})
-    
-    set_target_properties(
-        libsycomore PROPERTIES 
-        OUTPUT_NAME sycomore 
-        VERSION ${sycomore_VERSION} 
-        SOVERSION ${sycomore_VERSION_MAJOR}
-        $<$<PLATFORM_ID:Darwin>:INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/lib>)
-    
-    install(
-        TARGETS libsycomore
-        EXPORT sycomoreTargets
-        ARCHIVE DESTINATION bin LIBRARY DESTINATION lib RUNTIME DESTINATION bin
-        PUBLIC_HEADER DESTINATION include/sycomore
-        INCLUDES DESTINATION include)
-    
-    foreach(include_file ${header_files} ${template_files})
-        file(
-            RELATIVE_PATH 
-            include_path ${CMAKE_CURRENT_SOURCE_DIR} ${include_file})
-        get_filename_component(include_path ${include_path} PATH)
-        install(FILES ${include_file} DESTINATION "include/${include_path}")
-    endforeach()
+    set_source_files_properties(
+        sycomore/epg/simd_api_avx512.cpp PROPERTIES 
+        COMPILE_FLAGS "${AVX512_FLAGS}")
 endif()
 
+add_library(libsycomore ${source_files} ${header_files} ${template_files})
+
+target_compile_definitions(
+    libsycomore
+    PRIVATE
+        $<$<PLATFORM_ID:Windows>:BUILDING_SYCOMORE>)
+
+target_include_directories(
+    libsycomore
+    PUBLIC
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/> $<INSTALL_INTERFACE:>
+        ${xsimd_INCLUDE_DIRS})
+
+set_target_properties(
+    libsycomore PROPERTIES 
+    OUTPUT_NAME sycomore 
+    VERSION ${sycomore_VERSION} 
+    SOVERSION ${sycomore_VERSION_MAJOR}
+    $<$<PLATFORM_ID:Darwin>:INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/lib>)
+
+install(
+    TARGETS libsycomore
+    EXPORT sycomoreTargets
+    ARCHIVE DESTINATION bin LIBRARY DESTINATION lib RUNTIME DESTINATION bin
+    PUBLIC_HEADER DESTINATION include/sycomore
+    INCLUDES DESTINATION include)
+
+foreach(include_file ${header_files} ${template_files})
+    file(
+        RELATIVE_PATH 
+        include_path ${CMAKE_CURRENT_SOURCE_DIR} ${include_file})
+    get_filename_component(include_path ${include_path} PATH)
+    install(FILES ${include_file} DESTINATION "include/${include_path}")
+endforeach()
+
 file(GLOB_RECURSE python_files "*.py")
 list(SORT python_files)
 
@@ -81,15 +79,14 @@ add_custom_target(
     libsycomore-python ${CMAKE_COMMAND} -E echo "Python files"
     SOURCES ${python_files})
 
-if(NOT BUILD_STANDALONE_PYTHON_WRAPPERS)
-    execute_process(
-        COMMAND ${PYTHON_EXECUTABLE}
-          -c "from distutils.sysconfig import *; print(get_python_lib(True, prefix=''))"
-        OUTPUT_VARIABLE PYTHON_SITE_PACKAGES
-        OUTPUT_STRIP_TRAILING_WHITESPACE)
-else()
-    set(PYTHON_SITE_PACKAGES ".")
-endif()
+execute_process(
+    COMMAND ${Python_EXECUTABLE}
+        -c "import os; import sysconfig; \
+            scheme = {'posix': 'posix_prefix', 'nt': 'nt'}[os.name]; \
+            path = sysconfig.get_path('purelib', scheme, {'base': '.'}); \
+            print(path.replace(os.path.sep, '/'))"
+    OUTPUT_VARIABLE PYTHON_SITE_PACKAGES
+    OUTPUT_STRIP_TRAILING_WHITESPACE)
 
 foreach(python_file ${python_files})
     file(RELATIVE_PATH module ${CMAKE_CURRENT_SOURCE_DIR} ${python_file})
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index c48d97c..131bab0 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -10,48 +10,45 @@ endif()
 
 file(GLOB_RECURSE cpp_tests cpp/*.cpp)
 
-if(NOT BUILD_STANDALONE_PYTHON_WRAPPERS)
-    foreach(test_file ${cpp_tests})
-        get_filename_component(unit ${test_file} NAME_WE)
-        get_filename_component(module ${test_file} PATH)
-        get_filename_component(module ${module} NAME)
-        if(NOT "${module}" STREQUAL "cpp")
-            set(test "${module}_${unit}")
-        else()
-            set(test "${unit}")
+foreach(test_file ${cpp_tests})
+    get_filename_component(unit ${test_file} NAME_WE)
+    get_filename_component(module ${test_file} PATH)
+    get_filename_component(module ${module} NAME)
+    if(NOT "${module}" STREQUAL "cpp")
+        set(test "${module}_${unit}")
+    else()
+        set(test "${unit}")
+    endif()
+
+    add_executable(test_${test} ${test_file})
+    
+    target_compile_definitions(
+        test_${test} PRIVATE $<$<BOOL:BUILD_SHARED_LIBS>:BOOST_ALL_DYN_LINK>)
+    
+    target_include_directories(
+        test_${test} PRIVATE ${CMAKE_SOURCE_DIR}/src ${Boost_LIBRARY_DIRS})
+    
+    target_link_libraries(
+        test_${test} PRIVATE ${Boost_LIBRARIES} libsycomore)
+    
+    set_target_properties(test_${test} PROPERTIES OUTPUT_NAME ${test})
+
+    file(READ ${test_file} content)
+
+    set(pattern "BOOST_(AUTO|FIXTURE)_TEST_CASE\\(([^),]+)")
+
+    string(REGEX MATCHALL ${pattern} cases ${content})
+
+    foreach(case ${cases})
+        string(REGEX REPLACE ${pattern} "\\2" case ${case})
+        if(NOT ${case} MATCHES "##")
+            add_test("${test}_${case}" "${test}" "--run_test=${case}")
         endif()
-
-        add_executable(test_${test} ${test_file})
-        
-        target_compile_definitions(
-            test_${test} PRIVATE $<$<BOOL:BUILD_SHARED_LIBS>:BOOST_ALL_DYN_LINK>)
-        
-        target_include_directories(
-            test_${test} PRIVATE ${CMAKE_SOURCE_DIR}/src ${Boost_LIBRARY_DIRS})
-        
-        target_link_libraries(
-            test_${test} PRIVATE ${Boost_LIBRARIES} libsycomore)
-        
-        set_target_properties(test_${test} PROPERTIES OUTPUT_NAME ${test})
-
-        file(READ ${test_file} content)
-
-        set(pattern "BOOST_(AUTO|FIXTURE)_TEST_CASE\\(([^),]+)")
-
-        string(REGEX MATCHALL ${pattern} cases ${content})
-
-        foreach(case ${cases})
-            string(REGEX REPLACE ${pattern} "\\2" case ${case})
-            if(NOT ${case} MATCHES "##")
-                add_test("${test}_${case}" "${test}" "--run_test=${case}")
-            endif()
-        endforeach()
     endforeach()
-endif()
+endforeach()
 
 file(GLOB_RECURSE data data/*)
-add_custom_target(
-    data ${CMAKE_COMMAND} -E echo "Data" SOURCES ${data})
+add_custom_target(data ${CMAKE_COMMAND} -E echo "Data" SOURCES ${data})
 set_target_properties(data PROPERTIES FOLDER "Test data")
 
 file(GLOB_RECURSE python_tests python/*.py)
diff --git a/wrappers/python/CMakeLists.txt b/wrappers/python/CMakeLists.txt
index 7660af4..3c4d665 100644
--- a/wrappers/python/CMakeLists.txt
+++ b/wrappers/python/CMakeLists.txt
@@ -1,3 +1,4 @@
+find_package(Python COMPONENTS Interpreter Development NumPy REQUIRED)
 find_package(pybind11 REQUIRED)
 find_package(xsimd REQUIRED)
 
@@ -8,58 +9,11 @@ list(SORT header_files)
 list(SORT source_files)
 list(SORT python_files)
 
-if(BUILD_STANDALONE_PYTHON_WRAPPERS)
-    file(GLOB_RECURSE lib_files "${CMAKE_SOURCE_DIR}/src/*.cpp")
-    
-    if(MSVC)
-        set_source_files_properties(
-            ${CMAKE_SOURCE_DIR}/src/sycomore/epg/simd_api_sse2.cpp PROPERTIES
-            COMPILE_FLAGS "/arch:SSE2")
-        set_source_files_properties(
-            ${CMAKE_SOURCE_DIR}/src/sycomore/epg/simd_api_avx.cpp PROPERTIES
-            COMPILE_FLAGS "/arch:AVX")
-        set_source_files_properties(
-            ${CMAKE_SOURCE_DIR}/src/sycomore/epg/simd_api_avx512.cpp PROPERTIES
-            COMPILE_FLAGS "/arch:AVX512")
-    else()
-        set_source_files_properties(
-            ${CMAKE_SOURCE_DIR}/src/sycomore/epg/simd_api_sse2.cpp PROPERTIES
-            COMPILE_FLAGS "-msse2")
-        set_source_files_properties(
-            ${CMAKE_SOURCE_DIR}/src/sycomore/epg/simd_api_avx.cpp PROPERTIES
-            COMPILE_FLAGS "-mavx")
-        
-        # gcc -march=skylake-avx512 -Q --help=target | grep avx512 | grep enabled
-        # This is the earliest architecture to support AVX512
-        set(AVX512_FLAGS "-mavx512bw -mavx512cd -mavx512dq -mavx512f -mavx512vl")
-        if(APPLE AND "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
-            # Pretend we are GCC >= 6 so that xsimd enables AVX512
-            # cf. https://github.com/xtensor-stack/xsimd/blob/7.4.9/include/xsimd/config/xsimd_instruction_set.hpp#L109
-            set(AVX512_FLAGS "${AVX512_FLAGS} -U__GNUC__ -D__GNUC__=6")
-        endif()
-        set_source_files_properties(
-            ${CMAKE_SOURCE_DIR}/src/sycomore/epg/simd_api_avx512.cpp PROPERTIES 
-            COMPILE_FLAGS "${AVX512_FLAGS}")
-    endif()
-    
-    set(source_files ${source_files} ${lib_files})
-endif()
-
-pybind11_add_module(pysycomore SHARED ${source_files} ${header_files})
+pybind11_add_module(pysycomore ${source_files} ${header_files})
 
-target_compile_definitions(
-    pysycomore
-    PRIVATE
-    $<$<AND:$<PLATFORM_ID:Windows>,$<BOOL:${BUILD_STANDALONE_PYTHON_WRAPPERS}>>:BUILDING_SYCOMORE>)
+target_include_directories(pysycomore PRIVATE ${CMAKE_SOURCE_DIR}/src)
 
-target_include_directories(
-    pysycomore 
-    PRIVATE 
-        ${CMAKE_SOURCE_DIR}/src ${PYTHON_INCLUDE_DIRS} ${xsimd_INCLUDE_DIRS})
-
-if(NOT BUILD_STANDALONE_PYTHON_WRAPPERS)
-    target_link_libraries(pysycomore PUBLIC libsycomore)
-endif()
+target_link_libraries(pysycomore PUBLIC libsycomore Python::NumPy)
 
 set_target_properties(
     pysycomore PROPERTIES 
@@ -70,18 +24,19 @@ add_custom_target(
     pysycomore-pure ${CMAKE_COMMAND} -E echo "Pure-python files"
     SOURCES ${python_files})
 
-if(NOT BUILD_STANDALONE_PYTHON_WRAPPERS)
-    execute_process(
-        COMMAND ${PYTHON_EXECUTABLE}
-          -c "import os; \
-            from distutils.sysconfig import *; \
-            print(get_python_lib(True, prefix='').replace(os.path.sep, '/'))"
-        OUTPUT_VARIABLE PYTHON_SITE_PACKAGES
-        OUTPUT_STRIP_TRAILING_WHITESPACE)
-else()
-    set(PYTHON_SITE_PACKAGES ".")
-endif()
+execute_process(
+    COMMAND ${Python_EXECUTABLE}
+        -c "import os; import sysconfig; \
+            scheme = {'posix': 'posix_prefix', 'nt': 'nt'}[os.name]; \
+            path = sysconfig.get_path('purelib', scheme, {'base': '.'}); \
+            print(path.replace(os.path.sep, '/'))"
+    OUTPUT_VARIABLE PYTHON_SITE_PACKAGES
+    OUTPUT_STRIP_TRAILING_WHITESPACE)
 
 install(DIRECTORY DESTINATION "${PYTHON_SITE_PACKAGES}")
 install(TARGETS pysycomore DESTINATION "${PYTHON_SITE_PACKAGES}/sycomore")
 install(FILES ${python_files} DESTINATION "${PYTHON_SITE_PACKAGES}/sycomore")
+
+if(WIN32 OR APPLE)
+    install(TARGETS libsycomore DESTINATION "${PYTHON_SITE_PACKAGES}/sycomore")
+endif()
